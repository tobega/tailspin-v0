// https://www.reddit.com/r/dailyprogrammer/comments/np3sio/20210531_challenge_392_intermediate_pancake_sort/
// Quicksort-inspired solution to pancake sort

templates pancakeQuick
  @: {stack: $, flips: 0};

  sink flip
    when <2..> do
      @pancakeQuick.stack(1..$): $@pancakeQuick.stack($..1:-1)...;
//      '$@pancakeQuick.stack;$#10;' -> !OUT::write
      @pancakeQuick.flips: $@pancakeQuick.flips + 1;
  end flip

  sink order&{cmp:}
    @: {};
    def n: $;
    $ - 1 -> #

    when <=0 ?($@ <{break: <>}>)> do
      $@.break -> !order&{cmp: -$cmp}
      $n -> !flip
      $n - $@.break -> !order&{cmp: $cmp}
    
    when <=0> do
      $n - 1 -> \(<2..> $ !\) -> !order&{cmp: $cmp}

    when <?($cmp <=1>)
      ?($@pancakeQuick.stack($) <$@pancakeQuick.stack($n)~..>)
      ?($@pancakeQuick.stack(1) <..$@pancakeQuick.stack($n)>)
    | ?($cmp <=-1>)
      ?($@pancakeQuick.stack($) <..~$@pancakeQuick.stack($n)>)
      ?($@pancakeQuick.stack(1) <$@pancakeQuick.stack($n)..>)
    > do
      $ -> !flip
      $ - 1 -> #

    when <?($@ <{break: <>}>)
      ?($cmp <=1>)
      ?($@pancakeQuick.stack($) <..$@pancakeQuick.stack($n)>)
    | ?($@ <{break: <>}>)
      ?($cmp <=-1>)
      ?($@pancakeQuick.stack($) <$@pancakeQuick.stack($n)..>)
    > do
      $ -> !flip
      ^@.break -> #

    when <?($@ <{break: VOID}>)
      ?($cmp <=1>)
      ?($@pancakeQuick.stack($) <..$@pancakeQuick.stack($n)>)
    | ?($@ <{break: VOID}>)
      ?($cmp <=-1>)
      ?($@pancakeQuick.stack($) <$@pancakeQuick.stack($n)..>)
    | ?($@ <{break: <>}>)
      ?($cmp <=1>)
      ?($@pancakeQuick.stack($) <$@pancakeQuick.stack($n)~..>)
    | ?($@ <{break: <>}>)
      ?($cmp <=-1>)
      ?($@pancakeQuick.stack($) <..~$@pancakeQuick.stack($n)>)
    > do
      $ - 1 -> #

    otherwise
      ..|@: (break: $);
      $ - 1 -> #
  end order
  $::length -> !order&{cmp: 1}
  $@ !
end pancakeQuick

composer toInt
  <INT>
end toInt

[$IN::lines -> toInt] -> pancakeQuick -> !OUT::write
