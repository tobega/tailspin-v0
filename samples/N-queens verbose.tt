// trying a more verbose syntax
transform queens
  def n: $;
  transform addColumn
    def prev: $;
    transform addIfPossible
      def row: $;
      def minor: $ - $prev::length - 1;
      def major: $ + $prev::length + 1;
      // If prev is not an array that contains row, send it on...
      $prev -> keep <~[<=$row>]>
            -> keep <where $ -> transform[i] $ - $i ! end <~[<=$minor>]>> 
            -> keep <where $ -> transform[i] $ + $i ! end <~[<=$major>]>>
            -> [ $..., $row] !
    end addIfPossible
    1..$n -> addIfPossible !
  end addColumn
  1..$n -> [$] -> select
    when <[]($n)> do $ !
    when <> do $ -> addColumn -> reselect
  done !
end queens

def solutions: [ 8 -> queens ];
'For 8 queens there are $solutions::length; solutions
' -> !OUT::write

def columns: ['abcdefgh'...];
'One of them is $solutions(1) -> transform[i] '$columns($i);$;' ! end;
' -> !OUT::write

'For 3 queens there are $:[3 -> queens] -> $::length; solutions
' -> !OUT::write
