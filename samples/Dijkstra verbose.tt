transform shortestPaths@{graph:}
  @: [];
  [ {to: $, distance: 0, path:[]} ] -> transform
    when <[](0)> do $@shortestPaths !
    when <> do
      def closest: $ -> transform min @: $(1); $(2..last)... -> select when <{distance: <..~$@min.distance>}> do @min: $; end $@ ! end min;
      $closest -> ..|@shortestPaths: $;
      def path: [ $closest.path..., $closest.to ];
      [ $... -> keep <{to: <~=$closest.to>}>,
        $graph... -> keep <where $.edge(1) <=$closest.to> where $@shortestPaths <~[<{to: <=$.edge(2)>}>]>>
          -> { to: $.edge(2), distance: $.cost + $closest.distance, path: $path} ] -> reselect
  end !
end shortestPaths

def edges: [
  { edge: ['a', 'b'], cost: 7 },
  { edge: ['a', 'c'], cost: 9 },
  { edge: ['a', 'f'], cost: 14 },
  { edge: ['b', 'c'], cost: 10 },
  { edge: ['b', 'd'], cost: 15 },
  { edge: ['c', 'd'], cost: 11 },
  { edge: ['c', 'f'], cost: 2 },
  { edge: ['d', 'e'], cost: 6 },
  { edge: ['e', 'f'], cost: 9 }];

def fromA: 'a' -> shortestPaths@{graph: $edges};

$fromA... -> keep <{to:<='e'>}> -> 'Shortest path from $.path(1); to $.to; is distance $.distance; via $.path(2..last);
' -> !OUT::write

$fromA... -> keep <{to:<='f'>}> -> 'Shortest path from $.path(1); to $.to; is distance $.distance; via $.path(2..last);
' -> !OUT::write

