transform shortestPaths@{graph:}
  @: [];
  [ {to: $, distance: 0, path:[]} ] -> #
  match <[](0)> do $@ !
  match <> do
    def closest: $ -> transform @: $(1); $(2..last)... -> if <{distance: <..~$@.distance>}> -> @: $; $@ ! end;
    $closest -> ..|@: $;
    def path: [ $closest.path..., $closest.to ];
    [ $... -> if <{to: <~=$closest.to>}>,
      $graph... -> if <when $.edge(1) <=$closest.to> when $@shortestPaths <~[<{to: <=$.edge(2)>}>]>>
        -> { to: $.edge(2), distance: $.cost + $closest.distance, path: $path} ] -> #
end shortestPaths

def edges: [
  { edge: ['a', 'b'], cost: 7 },
  { edge: ['a', 'c'], cost: 9 },
  { edge: ['a', 'f'], cost: 14 },
  { edge: ['b', 'c'], cost: 10 },
  { edge: ['b', 'd'], cost: 15 },
  { edge: ['c', 'd'], cost: 11 },
  { edge: ['c', 'f'], cost: 2 },
  { edge: ['d', 'e'], cost: 6 },
  { edge: ['e', 'f'], cost: 9 }];

def fromA: 'a' -> shortestPaths@{graph: $edges};

$fromA... -> if <{to:<='e'>}> -> 'Shortest path from $.path(1); to $.to; is distance $.distance; via $.path(2..last);
' -> !OUT::write

$fromA... -> if <{to:<='f'>}> -> 'Shortest path from $.path(1); to $.to; is distance $.distance; via $.path(2..last);
' -> !OUT::write

