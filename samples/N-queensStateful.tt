templates queens
  def n: $;
  templates getRowColumn
    when <?($@queens.freeRows($.r) <=0>)> do 0 !
    when <?($@queens.freeMaxs($.r + $.c) <=0>)> do 0 !
    when <?($@queens.freeMins($.c - $.r + $n) <=0>)> do 0 !
    otherwise 1!
  end getRowColumn

  sink setRowColumn
    def p: $;
    @queens.freeRows($p.r): $p.val;
    @queens.freeMaxs($p.c + $p.r): $p.val;
    @queens.freeMins($p.c - $p.r + $n): $p.val;
  end setRowColumn

  templates placeQueen
    def c: $;
    1 -> #
    when <=-1> do 1! // Use -1 to signal successful completion
    when <=$n+1> do 0 !
    when <?({r: $, c: $c} -> getRowColumn <=1>)> do
      def r: $;
      @queens.queenRows($r): $c;
      {r: $, c: $c, val: 0} -> !setRowColumn
      $c -> \(<=$n> -1!
        <?($c + 1 -> placeQueen <=1>)> -1!
        <>
          {r: $r, c: $c, val: 1} -> !setRowColumn
          $r + 1 !\) -> #
    otherwise $ + 1 -> #
  end placeQueen

  @: { freeRows: [1..$n -> 1],
    freeMaxs: [1..$n*2 -> 1],
    freeMins: [1..$n*2 -> 1],
    queenRows: [1..$n -> -1] };
  1 -> placeQueen -> \(<=1> $@queens.queenRows ! <> 'non-existent'!\)!
end queens

'A solution to the 8 queens problem is $:8 -> queens;
' -> !OUT::write
'A solution to the 4 queens problem is $:4 -> queens;
' -> !OUT::write
'A solution to the 3 queens problem is $:3 -> queens;
' -> !OUT::write
