templates queens
  def n: $it
  templates getRowColumn
    <?($@queens.freeRows($it.r) <0>)> 0 !
    <?($@queens.freeMaxs($it.r + $it.c) <0>)> 0 !
    <?($@queens.freeMins($it.c - $it.r + $n) <0>)> 0 !
    <> 1!
  end getRowColumn

  templates setRowColumn
    def p: $it
    $p.val -> @queens.freeRows($p.r)
    $p.val -> @queens.freeMaxs($p.c + $p.r)
    $p.val -> @queens.freeMins($p.c - $p.r + $n)
  end setRowColumn

  templates placeQueen
    def c: $it
    1 -> #
    <-1> 1! // Use -1 to signal successful completion
    <$n+1> 0 !
    <?({r: $it, c: $c} -> getRowColumn <1>)>
      def r: $it
      $c -> @queens.queenRows($r)
      {r: $it, c: $c, val: 0} -> setRowColumn -> void
      $c -> (<$n> -1!
        <?($c + 1 -> placeQueen <1>)> -1!
        <>
          {r: $r, c: $c, val: 1} -> setRowColumn -> void
          $r + 1 !) -> #
    <> $it + 1 -> #
  end placeQueen

  { freeRows: [1..$n -> 1],
    freeMaxs: [1..$n*2 -> 1],
    freeMins: [1..$n*2 -> 1],
    queenRows: [1..$n -> -1] } -> @
  1 -> placeQueen -> void
  $@.queenRows !
end queens

'A solution to the 8 queens problem is $(8 -> queens)
' -> stdout
'A solution to the 4 queens problem is $(4 -> queens)
' -> stdout