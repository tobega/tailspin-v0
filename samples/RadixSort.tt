templates radixsort@{base:}
  sink bucketize
    def value: $;
    $ ~/ $@radixsort.digit -> #
    <0 ?($value <0..>)>
      ..|@radixsort.positives: $value;
    <0>
      ..|@radixsort.negatives(-1): $value;
    <>
      def bucket: $ mod $base -> (<?($value<0..>)> $ + 1 ! <0> $base ! <> $ !);
      ..|@radixsort.buckets($bucket): $value;
      @radixsort.done: 0;
  end bucketize
  // Negatives get completed in wrong length-order, we need to collect by length and correct at the end
  @: { done: 1, digit: 1, positives: [], negatives: [[]], buckets: [1..$base -> []]};
  $... -> !bucketize
  $@.done -> #
  <1>
    [$@.negatives(-1..1:-1)... ..., $@.positives...] !
  <>
    def previous: $@.buckets;
    ..|@: {done: 1, digit: $@.digit * $base, buckets:[1..$base -> []]};
    ..|@.negatives: [];
    $previous... ... -> !bucketize
    $@.done -> #
end radixsort

[170, 45, 75, 91, 90, 92, 802, 24, 2, 66] -> radixsort@{base:10} -> !OUT::write
'
' -> !OUT::write
[-170, -45, -91, -90, -92, -802, -24, -2, -76] -> radixsort@{base:10} -> !OUT::write
'
' -> !OUT::write
[170, 45, 75, -91, -90, -92, -802, 24, 2, 66] -> radixsort@{base:10} -> !OUT::write
'
' -> !OUT::write
[170, 45, 75, -91, -90, -92, -802, 24, 2, 66] -> radixsort@{base:3} -> !OUT::write
