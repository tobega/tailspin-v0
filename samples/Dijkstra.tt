templates shortestPaths&{graph:}
  @: [];
  [ {to: $, distance: 0"1", path:[]} ] -> #
  when <[](0)> do $@ !
  otherwise
    def closest: $ -> \(@: $(1);
      $(2..last)... -> #
      $@!
      when <{distance: <..~$@.distance>}> do @: $;\);
    $closest -> ..|@: $;
    def path: [ $closest.path..., $closest.to ];
    [ $... -> \(when <{to: <~=$closest.to>}> do $!\),
      $graph... -> \(when <?($.edge(1) <=$closest.to::raw>) ?($@shortestPaths <~[<{to: <=$.edge(2)>}>]>)> do $!\)
        -> { to: $.edge(2), distance: $.cost + $closest.distance, path: $path} ] -> #
end shortestPaths

def edges: [
  { edge: ['a', 'b'], cost: 7"1" },
  { edge: ['a', 'c'], cost: 9"1" },
  { edge: ['a', 'f'], cost: 14"1" },
  { edge: ['b', 'c'], cost: 10"1" },
  { edge: ['b', 'd'], cost: 15"1" },
  { edge: ['c', 'd'], cost: 11"1" },
  { edge: ['c', 'f'], cost: 2"1" },
  { edge: ['d', 'e'], cost: 6"1" },
  { edge: ['e', 'f'], cost: 9"1" }];

def fromA: 'a' -> shortestPaths&{graph: $edges};

$fromA... -> \(<{to:<='e'>}> $!\) -> 'Shortest path from $.path(1); to $.to; is distance $.distance; via $.path(2..last);
' -> !OUT::write

$fromA... -> \(<{to:<='f'>}> $!\) -> 'Shortest path from $.path(1); to $.to; is distance $.distance; via $.path(2..last);
' -> !OUT::write

