// Not all JSON object member keys can be represented, a fallback would need to be implemented
// Currently Tailspin only supports integers so for now we leave numbers as strings, as we do for true, false and null

templates hexToInt
  templates hexDigit
    <'0'> 0! <'1'> 1! <'2'> 2! <'3'> 3! <'4'> 4! <'5'> 5! <'6'> 6! <'7'> 7! <'8'> 8! <'9'> 9!
    <'[Aa]'> 10! <'Bb'> 11! <'Cc'> 12! <'Dd'> 13! <'Ee'> 14! <'Ff'> 15!
  end hexDigit
  @: 0
  $it... -> hexDigit -> (@hexToInt: $@hexToInt * 16 + $it) -> void
  $@ !
end hexToInt

composer jsonParser
  <value>
  value: (<WS>?) <string|number|object|array|true|false|null> (<WS>?)

  string: (<'"'>) <chars>  (<'"'>)
  chars: [ <quote|backslash|slash|backspace|formfeed|linefeed|return|tab|unicode|'[^"]'>* ] -> '$($it...)'
  quote: <'\\"'> -> '"'
  backslash: <'\\\\'> -> '\'
  slash: <'\\/'> -> '/'
  backspace: <'\\b'> -> '$#8;'
  formfeed: <'\\f'> -> '$#12;'
  linefeed: <'\\n'> -> '$#10;'
  return: <'\\r'> -> '$#13;'
  tab: <'\\t'> -> '$#9;'
  unicode: (<'\\u'>) <'[0-9A-Fa-f]{4}'> -> hexToInt -> '$#$it;'

  number: <'-?(0|[1-9][0-9]*)(\.[0-9]+)?((e|E)(\+|-)?[0-9]+)?'> // TODO: represent this other than string

  object: (<'\{'> <WS>?) { <keyValues>? } (<'}'>)
  keyValues: <keyValue> <followingKeyValue>*
  keyValue: <string>: (<WS>? <':'>) <value>
  followingKeyValue: (<','> <WS>?) <keyValue>

  array: (<'\['>) [ <arrayValues>? ] (<']'>)
  arrayValues: <value> <followingArrayValue>*
  followingArrayValue: (<','>) <value>

  true: <'true'> // TODO: represent this other than string
  false: <'false'> // TODO: represent this other than string
  null: <'null'> // TODO: represent this other than string
end jsonParser

templates printJson
  templates printKeyValue
    '$($it::key -> printJson): $($it::value -> printJson)' !
  end printKeyValue
  templates encodeChars
    <'"'> '\"' !
    <'\\'> '\\' !
    <'/'> '\/' !
    <'$#8;'> '\b' !
    <'$#12;'> '\f' !
    <'$#10;'> '\n' !
    <'$#13;'> '\r' !
    <'$#9;'> '\t' !
    <> $it !
  end encodeChars
  $it -> #
  <[]>
    '[$($it(1) -> printJson)$($it(2..-1)... -> ', $($it -> printJson)')]' !
  <{}>
    [ $it... ] -> '{$($it(1) -> printKeyValue)$($it(2..-1)... -> ', $($it -> printKeyValue)')}' !
  <..0|0..>
    '$it;'!
  <'.*'>
    [ $it... -> encodeChars ] -> '"$($it...)"' !
  <> 'WTF!' !
  // Other types do not yet exist in Tailspin
end printJson

'{ "foo": 1, "bar": [10, "apples"] }' -> jsonParser -> '$it.bar(2);
' -> !OUT::write

{ blue: [1,2], ocean: 'water' } -> printJson -> '$it;
' -> !OUT::write