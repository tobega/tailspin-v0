templates permutations
  when <=1> do [1] !
  otherwise
    def n: $;
    templates expand
      def p: $;
      1..$n -> \(def k: $;
        [$p(1..$k-1)..., $n, $p($k..last)...] !\) !
    end expand
    $n - 1 -> permutations -> expand !
end permutations

def alpha: ['ABCD'...];
[ $alpha::length -> permutations -> '$alpha($)...;' ] -> !OUT::write
'

' -> !OUT::write

templates lexicalPermutations
  when <=1> do [1] !
  otherwise
    def n: $;
    def p: [ $n - 1 -> lexicalPermutations ];
    1..$n -> \(def k: $;
      $p... -> [ $k, $... -> \(when <$k..> do $+1! otherwise $!\)] !\) !
end lexicalPermutations

templates lexicalPermutations2
  def N: $;
  [[1]] -> #
  when <[<[]($N)>]> do $... !
  otherwise
    def tails: $;
    [1..$tails(1)::length+1 -> \(
      def first: $;
      $tails... -> [$first, $... -> \(when <$first..> do $+1! otherwise $!\)] !
    \)] -> #
end lexicalPermutations2

[ $alpha::length -> lexicalPermutations2 -> '$alpha($)...;' ] -> !OUT::write
