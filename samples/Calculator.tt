// parse and calculate an arithmetic expression directly
composer calculator
  (<WS>?) <addition|multiplication|term> (<WS>?)
  rule addition: [<addition|multiplication|term> (<WS>?) <'[+-]'> (<WS>?) <multiplication|term>] ->
    \(when <?($(2) <='+'>)> do $(1) + $(3) !
      otherwise $(1) - $(3) !
    \)
  rule multiplication: [<multiplication|term> (<WS>?) <'[*/]'> (<WS>?) <term>] ->
    \(when <?($(2) <='*'>)> do $(1) * $(3) !
      otherwise $(1) ~/ $(3) !
    \)
  rule term: <INT|parentheses>
  rule parentheses: (<'\('> <WS>?) <addition|multiplication|term> (<WS>? <'\)'>)
end calculator

'(100 - 5 * (2+3*4) + 2) / 2' -> calculator -> !OUT::write
'
' -> !OUT::write

// parse arithmetic expression into an AST and then evaluate
data binaryExpression <{left: <binaryExpression|"1">, op: <>, right: <binaryExpression|"1">}>

composer parseArithmetic
  (<WS>?) <addition|multiplication|term> (<WS>?)
  rule addition: {left:<addition|multiplication|term> (<WS>?) op:<'[+-]'> (<WS>?) right:<multiplication|term>}
  rule multiplication: {left:<multiplication|term> (<WS>?) op:<'[*/]'> (<WS>?) right:<term>}
  rule term: <INT|parentheses>
  rule parentheses: (<'\('> <WS>?) <addition|multiplication|term> (<WS>? <'\)'>)
end parseArithmetic

templates evaluateArithmetic
  <{op: <='+'>}> ($.left -> evaluateArithmetic) + ($.right -> evaluateArithmetic) !
  <{op: <='-'>}> ($.left -> evaluateArithmetic) - ($.right -> evaluateArithmetic) !
  <{op: <='*'>}> ($.left -> evaluateArithmetic) * ($.right -> evaluateArithmetic) !
  <{op: <='/'>}> ($.left -> evaluateArithmetic) ~/ ($.right -> evaluateArithmetic) !
  otherwise $ !
end evaluateArithmetic

def ast: '(100 - 5 * (2+3*4) + 2) / 2' -> parseArithmetic;
'$ast;
' -> !OUT::write
'$ast -> evaluateArithmetic;
' -> !OUT::write
