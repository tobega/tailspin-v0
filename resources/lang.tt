processor Sum&{of:}
  @:{};
  sink accumulate
    when <?($@Sum <{VOID}>)> do @Sum: $(of);
    otherwise @Sum: $@Sum + $(of);
  end accumulate
  source result
    $@Sum !
  end result
end Sum

processor Group&{of:}
  @:[];
  sink accumulate
    ..|@Group: $(of);
  end accumulate
  source result
    {|$@Group...|} !
  end result
end Group

processor List&{of:}
  @:[];
  sink accumulate
    ..|@List: $(of);
  end accumulate
  source result
    $@List !
  end result
end List

processor Count
  @:0"1";
  sink accumulate
    @Count: $@Count + 1"1";
  end accumulate
  source result
    $@Count !
  end result
end Count

processor Max&{by:, select:}
  @:[];
  sink accumulate
    <?($@Max <[](0)>)
      | ?($(by) <$@Max(1)..>)>  @Max: [$(by), $(select)];
  end accumulate
  source result
    $@Max(2) !
  end result
end Max

processor Min&{by:, select:}
  @:[];
  sink accumulate
    <?($@Min <[](0)>)
      | ?($(by) <..$@Min(1)>)>  @Min: [$(by), $(select)];
  end accumulate
  source result
    $@Min(2) !
  end result
end Min

operator (left divide&{over:} right)
  ($over notMatching (($over join $right) minus ($left join $right))) !
end divide