import 'harness'

// This is not an idiomatic way to do this in Tailspin, unless you really need mutable elements in the list
processor Element
  @: {val: $};

  templates length
    <?($@Element <{next:<>}>)>
      1 + $@Element.next::length !
    <>
      1 !
  end length

  templates setNext
    ..|@Element: {next: $};
  end setNext

  templates getNext
    $@Element -> (<{next:<>}> $.next!) !
  end getNext
end Element

templates makeList
  <0~..>
    def element: $ -> Element;
    $ - 1 -> makeList -> $element::setNext -> !VOID
    $element !
end makeList

templates isShorterThan
  <{x:<>, y:<>}>
    { $.x::getNext -> {x: $}..., $.y::getNext -> {y:$}... } -> #
  <{y:<>}> 1 !
  <> 0 !
end isShorterThan

templates tail
  <?({x: $(2), y: $(1)} -> isShorterThan <1>)>
    [ [$(1)::getNext, $(2), $(3)] -> tail,
      [$(2)::getNext, $(3), $(2)] -> tail,
      [$(3)::getNext, $(1), $(2)] -> tail] -> tail !
  <>
    $(3) !
end tail

templates runAndVerify
  [15 -> makeList, 10 -> makeList, 6 -> makeList] -> tail -> $::length -> #
  <10> 1 !
  <> 0 !
end runAndVerify

1 -> harness/run@{name: 'List', benchmark:runAndVerify} -> !VOID
