import 'harness'

// This is not an idiomatic way to do this in Tailspin, unless you really need mutable elements in the list
processor Element
  @: {val: $it};

  templates length
    <?($@Element <{next:<>}>)>
      1 + $@Element.next::length !
    <>
      1 !
  end length

  templates setNext
    ..|@Element: {next: $it};
  end setNext

  templates getNext
    $@Element -> (<{next:<>}> $it.next!) !
  end getNext
end Element

templates makeList
  <0~..>
    def element: $it -> Element;
    $it - 1 -> makeList -> $element::setNext -> void
    $element !
end makeList

templates isShorterThan
  <{x:<>, y:<>}>
    { $it.x::getNext -> {x: $it}..., $it.y::getNext -> {y:$it}... } -> #
  <{y:<>}> 1 !
  <> 0 !
end isShorterThan

templates tail
  <?({x: $it(2), y: $it(1)} -> isShorterThan <1>)>
    [ [$it(1)::getNext, $it(2), $it(3)] -> tail,
      [$it(2)::getNext, $it(3), $it(2)] -> tail,
      [$it(3)::getNext, $it(1), $it(2)] -> tail] -> tail !
  <>
    $it(3) !
end tail

templates runAndVerify
  [15 -> makeList, 10 -> makeList, 6 -> makeList] -> tail -> $it::length -> #
  <10> 1 !
  <> 0 !
end runAndVerify

1 -> harness/run@{name: 'List', benchmark:runAndVerify} -> void
