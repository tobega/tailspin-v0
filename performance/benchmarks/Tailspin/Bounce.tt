include 'harness'
include 'som'

processor Ball&{random:}
  @: {
    x: ($random::next mod 500)"x",
    y: ($random::next mod 500)"y",
    xVel: ($random::next mod 300)"x" - 150,
    yVel: ($random::next mod 300)"y" - 150
  };
  source bounce
    def xLimit: 500"x";
    def yLimit: 500"y";
    @: 0;
    @Ball.x: $@Ball.x + $@Ball.xVel -> \(
      <$xLimit~..>
        $xLimit !
        @Ball.xVel: $@Ball.xVel -> \(<..0"x"> $! <> -$!\);
        @bounce: 1;
      <..~0"x">
        0"x" !
        @Ball.xVel: $@Ball.xVel -> \(<..0"x"> -$! <> $!\);
        @bounce: 1;
      <> $!\);
    @Ball.y: $@Ball.y + $@Ball.yVel -> \(
      <$yLimit~..>
        $yLimit !
        @Ball.yVel: $@Ball.yVel -> \(<..0"y"> $! <> -$!\);
        @bounce: 1;
      <..~0"y">
        0"y" !
        @Ball.yVel: $@Ball.yVel -> \(<..0"y"> -$! <> $!\);
        @bounce: 1;
      <> $!\);
    $@bounce !
  end bounce
end Ball

templates runAndVerify
  def random: $som/Random;
  def ballCount: 100;
  @: 0;
  def balls: [1..$ballCount -> $Ball&{random: $random}];
  1..50 -> \(
    $balls... -> @runAndVerify: $@runAndVerify + $::bounce;
  \) -> !VOID
  $@ -> #
  <=1331> 1 !
  <> 0 !
end runAndVerify

1 -> harness/run&{name: 'Bounce', benchmark:runAndVerify} -> !VOID
