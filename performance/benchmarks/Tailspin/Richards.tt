// This is a very baroque implementation, see Richards2.tt for a saner one

include 'harness'

// Currently no way to define processor types
data taskList <>, link <>, input <>, currentTask <>, deviceIn <>, workIn <>
data identity <0..6>, destination <identity>, currentTaskIdentity <identity>

def NO_TASK: {};
def NO_WORK: {};
def IDLER: identity´1;
def WORKER: identity´2;
def HANDLER_A: identity´3;
def HANDLER_B: identity´4;
def DEVICE_A: identity´5;
def DEVICE_B: identity´6;
def NUM_TYPES: 6;

def DEVICE_PACKET_KIND: kind´0;
def WORK_PACKET_KIND: kind´1;

def DATA_SIZE: 4"1";

def TRACING: 0;

operator (packet appendTo queueHead)
  $NO_WORK -> !packet::setLink
  $queueHead -> #
  when <?($queueHead <=$NO_WORK>)> do $packet!
  when <?($::getLink <~=$NO_WORK>)> do $::getLink -> #
  otherwise def mouse: $; $packet -> !mouse::setLink
    $queueHead !
end appendTo

processor Scheduler
  @: {
    layout: 0,
    queuePacketCount: 0"1",
    holdCount: 0"1",
    taskTable: identity´1:[1..$NUM_TYPES -> $NO_TASK],
    taskList: $NO_TASK,
    currentTask: $NO_TASK,
    currentTaskIdentity: 0
  };

  sink createTask&{data:, function:}
    $ -> TaskControlBlock&{link: $@Scheduler.taskList, data: $data, function: function}
      -> \(
        @Scheduler.taskList: $;
        @Scheduler.taskTable($::getIdentity): $;
      \) -> !VOID
  end createTask

  sink trace
    @Scheduler.layout: $@Scheduler.layout - 1
      -> \(<..0> '$#10;' -> !OUT::write 50! <> $! \);
    $ -> !OUT::write
  end trace

  templates findTask
    $@Scheduler.taskTable($)!
  end findTask

  templates queuePacket
    def packet: $;
    $packet::getIdentity -> findTask -> #
    when <=$NO_TASK> do $NO_TASK !
    otherwise
      def t: $;
      @Scheduler.queuePacketCount: $@Scheduler.queuePacketCount + 1"1";
      $NO_WORK -> !packet::setLink
      $@Scheduler.currentTaskIdentity -> !packet::setIdentity
      $packet -> t::addInputAndGetPriority -> \(
        when <$@Scheduler.currentTask::getPriority~..> do $t !
        otherwise $@Scheduler.currentTask !
      \) !
  end queuePacket

  source holdSelf
    @Scheduler.holdCount: $@Scheduler.holdCount + 1"1";
    1 -> !@Scheduler.currentTask::setTaskHolding
    $@Scheduler.currentTask::getLink!
  end holdSelf

  templates release
    $ -> findTask -> #
    when <=$NO_TASK> do $NO_TASK !
    otherwise
      def t: $;
      0 -> !t::setTaskHolding
      $t -> \(
        when <?($::getPriority <$@Scheduler.currentTask::getPriority~..>)> do $!
        otherwise $@Scheduler.currentTask !
      \) !
  end release

  source markWaiting
    1 -> !@Scheduler.currentTask::setTaskWaiting
    $@Scheduler.currentTask !
  end markWaiting

  sink createDevice
    templates deviceFunction
      when <?($(1) <=$NO_WORK>)> do
        $(2)::removePending -> \(
          <=$NO_WORK> $markWaiting !
          otherwise $ -> queuePacket !
        \) !
      otherwise
        def dataRecord: $(2);
        $(1) -> !dataRecord::setPending
        $(1) -> \(<?($TRACING <=1>)> $::getDatum !\) -> !trace
        $holdSelf !
    end deviceFunction
    $ -> !createTask&{data: $DeviceTaskDataRecord, function: deviceFunction}
  end createDevice

  sink createHandler
    templates handlerFunction
      def dataRecord: $(2);
      $(1) -> \(<~=$NO_WORK> $! \)
        -> \(
          when <?($::getKind <=$WORK_PACKET_KIND>)> do $ -> !dataRecord::workInAdd
          otherwise $ -> !dataRecord::deviceInAdd
        \) -> !VOID
      $dataRecord::getWorkIn -> \(
        when <=$NO_WORK> do $markWaiting!
        otherwise
          def count: $::getDatum;
          $ -> \(
            when <?($count <$DATA_SIZE..>)> do
              $::getLink -> !dataRecord::setWorkIn
              $ -> queuePacket !
            otherwise
              def workPacket: $;
              $dataRecord::getDeviceIn -> \(
                when <=$NO_WORK> do $markWaiting!
                otherwise
                  def devicePacket: $;
                  $::getLink -> !dataRecord::setDeviceIn
                  ($workPacket::getData&{i: $count})"1" -> !devicePacket::setDatum
                  $count + 1"1" -> !workPacket::setDatum
                  $devicePacket -> queuePacket !
              \) !
          \) !
      \) !
    end handlerFunction
    $ -> !createTask&{data: $HandlerTaskDataRecord, function: handlerFunction}
  end createHandler

  sink createIdler
    templates idlerFunction
      def dataRecord: $(2);
      $dataRecord::decrementCount -> \(
        when <=0"1"> do $holdSelf!
        otherwise
          ($dataRecord::getControl and [x01x]) -> $(last) -> \(
            when <=[x00x]> do
              $dataRecord::getControl -> $::shift&{left:-1, fill: $(0)} -> !dataRecord::setControl
              $DEVICE_A -> release !
            otherwise
              $dataRecord::getControl -> ($::shift&{left:-1, fill: $(0)} xor (53256 -> $::asBytes))
                -> !dataRecord::setControl
              $DEVICE_B -> release !
          \) !
      \) !
    end idlerFunction

    $ -> !createTask&{data: $IdleTaskDataRecord, function: idlerFunction}
  end createIdler

  sink createWorker
    templates workerFunction
      def work: $(1);
      def data: $(2);
      $(1) -> \(
        when <=$NO_WORK> do $markWaiting!
        otherwise
          $data::getDestination -> \(<=$HANDLER_A> $HANDLER_B! <> $HANDLER_A!\) -> !data::setDestination
          $data::getDestination -> !work::setIdentity
          0"1" -> !work::setDatum
          0"1"..~$DATA_SIZE -> \(
            def i: $;
            $data::getCount + 1"1" -> \(<..26"1"> $! <> 1"1"!\) -> !data::setCount
            65"1" + $data::getCount - 1"1" -> !work::setData&{i: $i}
          \) -> !VOID
          $work -> queuePacket !
      \) !
    end workerFunction
    $ -> !createTask&{data: $WorkerTaskDataRecord, function: workerFunction}
  end createWorker

  source schedule
    @Scheduler.currentTask: $@Scheduler.taskList;
    $@Scheduler.currentTask -> #
    when <=$NO_TASK> !VOID
    when <?($::isTaskHoldingOrWaiting <=1>)> do
      @Scheduler.currentTask: $::getLink;
      $@Scheduler.currentTask -> #
    otherwise
      @Scheduler.currentTaskIdentity: $::getIdentity;
      $::getIdentity -> \(<?($TRACING <=1>)> $!\) -> !trace
      @Scheduler.currentTask: $::runTask;
      $@Scheduler.currentTask -> #
  end schedule

  source start
    [$IDLER, 0, $NO_WORK, $taskStateRunning] -> !createIdler

    {link: $NO_WORK, identity: $WORKER, kind: $WORK_PACKET_KIND} -> Packet
    -> {link: $, identity: $WORKER, kind: $WORK_PACKET_KIND} -> Packet
    -> [$WORKER, 1000, $, $taskStateWaitingWithPacket] -> !createWorker

    {link: $NO_WORK, identity: $DEVICE_A, kind: $DEVICE_PACKET_KIND} -> Packet
    -> {link: $, identity: $DEVICE_A, kind: $DEVICE_PACKET_KIND} -> Packet
    -> {link: $, identity: $DEVICE_A, kind: $DEVICE_PACKET_KIND} -> Packet
    -> [$HANDLER_A, 2000, $, $taskStateWaitingWithPacket] -> !createHandler

    {link: $NO_WORK, identity: $DEVICE_B, kind: $DEVICE_PACKET_KIND} -> Packet
    -> {link: $, identity: $DEVICE_B, kind: $DEVICE_PACKET_KIND} -> Packet
    -> {link: $, identity: $DEVICE_B, kind: $DEVICE_PACKET_KIND} -> Packet
    -> [$HANDLER_B, 3000, $, $taskStateWaitingWithPacket] -> !createHandler

    [$DEVICE_A, 4000, $NO_WORK, $taskStateWaiting] -> !createDevice
    [$DEVICE_B, 5000, $NO_WORK, $taskStateWaiting] -> !createDevice

    [$schedule] -> #
    <?($@Scheduler.queuePacketCount <=23246"1">)?($@Scheduler.holdCount <=9297"1">)>
      1 !
    otherwise
      0 !
  end start
end Scheduler

processor DeviceTaskDataRecord
  @:$NO_WORK;
  source removePending
    $@DeviceTaskDataRecord !
    @DeviceTaskDataRecord: $NO_WORK;
  end removePending
  sink setPending
    @DeviceTaskDataRecord: $;
  end setPending
end DeviceTaskDataRecord

processor HandlerTaskDataRecord
  @: { workIn: {}, deviceIn: {}};
  sink workInAdd
    @HandlerTaskDataRecord.workIn: ($ appendTo $@HandlerTaskDataRecord.workIn);
  end workInAdd
  source getWorkIn
    $@HandlerTaskDataRecord.workIn !
  end getWorkIn
  sink setWorkIn
    @HandlerTaskDataRecord.workIn: $;
  end setWorkIn
  sink deviceInAdd
    @HandlerTaskDataRecord.deviceIn: ($ appendTo $@HandlerTaskDataRecord.deviceIn);
  end deviceInAdd
  source getDeviceIn
    $@HandlerTaskDataRecord.deviceIn !
  end getDeviceIn
  sink setDeviceIn
    @HandlerTaskDataRecord.deviceIn: $;
  end setDeviceIn
end HandlerTaskDataRecord

processor IdleTaskDataRecord
  @: { control: [x01x] -> $(last-3..last), count: 10000"1"};
  source decrementCount
    @IdleTaskDataRecord.count: $@IdleTaskDataRecord.count - 1"1";
    $@IdleTaskDataRecord.count !
  end decrementCount
  source getControl
    $@IdleTaskDataRecord.control !
  end getControl
  sink setControl
    @IdleTaskDataRecord.control: $;
  end setControl
end IdleTaskDataRecord

processor WorkerTaskDataRecord
  @: {destination: $HANDLER_A, count: 0"1"};
  source getCount
    $@WorkerTaskDataRecord.count!
  end getCount
  sink setCount
    @WorkerTaskDataRecord.count: $;
  end setCount
  source getDestination
    $@WorkerTaskDataRecord.destination!
  end getDestination
  sink setDestination
    @WorkerTaskDataRecord.destination: $;
  end setDestination
end WorkerTaskDataRecord

processor Packet
  @: { $..., datum: 0"1", data: [1"1"..$DATA_SIZE -> 0] };
  source getKind
    $@Packet.kind!
  end getKind
  source getLink
    $@Packet.link!
  end getLink
  sink setLink
    @Packet.link: $;
  end setLink
  source getDatum
    $@Packet.datum !
  end getDatum
  sink setDatum
    @Packet.datum: $;
  end setDatum
  source getData&{i:}
    $@Packet.data($i::raw+1)!
  end getData
  sink setData&{i:}
    @Packet.data($i::raw+1): $;
  end setData
  source getIdentity
    $@Packet.identity!
  end getIdentity
  sink setIdentity
    @Packet.identity: $;
  end setIdentity
end Packet

processor TaskControlBlock&{link:, data:, function:}
  def identity: $(1);
  def priority: $(2);
  @: {input: $(3), $(4)...};

  templates addInputAndGetPriority
    when <?($@TaskControlBlock.input <=$NO_WORK>)> do
      @TaskControlBlock.input: $;
      @TaskControlBlock.packetPending: 1;
      $priority!
    otherwise
      @TaskControlBlock.input: ($ appendTo $@TaskControlBlock.input);
      0!
  end addInputAndGetPriority

  source getLink
    $link!
  end getLink

  source getPriority
    $priority!
  end getPriority

  source getIdentity
    $identity!
  end getIdentity

  sink setTaskHolding
    @TaskControlBlock.taskHolding: $;
  end setTaskHolding

  sink setTaskWaiting
    @TaskControlBlock.taskWaiting: $;
  end setTaskWaiting

  source isTaskHoldingOrWaiting
    $@TaskControlBlock.taskHolding -> #
    <=taskHolding´1> 1 !
    <?($@TaskControlBlock.packetPending <=packetPending´0>)?($@TaskControlBlock.taskWaiting <=taskWaiting´1>)> 1!
    <> 0!
  end isTaskHoldingOrWaiting

  source isWaitingWithPacket
    $@TaskControlBlock.taskHolding -> #
    <=taskHolding´1> 0 !
    <?($@TaskControlBlock.packetPending <=packetPending´1>)?($@TaskControlBlock.taskWaiting <=taskWaiting´1>)> 1!
    <> 0!
  end isWaitingWithPacket

  source runTask
    $isWaitingWithPacket -> \(
      when <=1> do
        $@TaskControlBlock.input !
        @TaskControlBlock.input: $@TaskControlBlock.input::getLink;
        $@TaskControlBlock.input -> \(
          <=$NO_WORK> ..|@TaskControlBlock: $taskStateRunning;
          <>  ..|@TaskControlBlock: $taskStatePacketPending;
        \) -> !VOID
      otherwise $NO_WORK !
    \) -> [$, $data] -> function !
  end runTask
end TaskControlBlock

source taskStatePacketPending
  { packetPending: 1, taskHolding: 0, taskWaiting: 0 } !
end taskStatePacketPending

source taskStateRunning
  { packetPending: 0, taskHolding: 0, taskWaiting: 0 } !
end taskStateRunning

source taskStateWaiting
  { packetPending: 0, taskHolding: 0, taskWaiting: 1 } !
end taskStateWaiting

source taskStateWaitingWithPacket
  { packetPending: 1, taskHolding: 0, taskWaiting: 1 } !
end taskStateWaitingWithPacket

templates run
  $Scheduler -> $::start !
end run

1 -> harness/run&{name: 'Richards', benchmark:run} -> !VOID
