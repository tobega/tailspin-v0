include 'harness'

def NO_TASK: {};
def NO_WORK: {};
def IDLER: 1;
def WORKER: 2;
def HANDLER_A: 3;
def HANDLER_B: 4;
def DEVICE_A: 5;
def DEVICE_B: 6;
def NUM_TYPES: 6;

def DEVICE_PACKET_KIND: 0;
def WORK_PACKET_KIND: 1;

def DATA_SIZE: 4;

def TRACING: 0;

processor Stats
  @: {
    queuePacketCount: 0,
    holdCount: 0
  };
  sink incrementQueuePacketCount
    @Stats.queuePacketCount: $ + $@Stats.queuePacketCount;
  end incrementQueuePacketCount
  sink incrementHoldCount
    @Stats.holdCount: $ + $@Stats.holdCount;
  end incrementHoldCount
  source get
    $@Stats!
  end get
end Stats

processor Scheduler&{stats:}
  @: {
    layout: 0,
    taskTable: [1..$NUM_TYPES -> $NO_TASK],
    taskList: $NO_TASK,
    currentTask: $NO_TASK,
    currentTaskIdentity: 0
  };

  sink createTask&{task:}
    $ -> TaskControlBlock&{link: $@Scheduler.taskList, task: $task, stats: $stats}
      -> \(
        @Scheduler.taskList: $;
        @Scheduler.taskTable($::getIdentity): $;
      \) -> !VOID
  end createTask

  sink trace
    @Scheduler.layout: $@Scheduler.layout - 1
      -> \(<..0> '$#10;' -> !OUT::write 50! <> $! \);
    $ -> !OUT::write
  end trace

  templates findTask
    $@Scheduler.taskTable($)!
  end findTask

  templates queuePacket
    def packet: $;
    $packet.identity -> findTask -> #
    when <=$NO_TASK> do $NO_TASK !
    otherwise
      def t: $;
      1 -> !stats::incrementQueuePacketCount
      {$packet..., identity:$@Scheduler.currentTaskIdentity} -> !t::addInput
      $t!
  end queuePacket

  templates release
    $ -> findTask -> #
    when <=$NO_TASK> do $NO_TASK !
    otherwise
      def t: $;
      0 -> !t::setTaskHolding
      $t !
  end release

  sink createDevice
    def task: $DeviceTask;
    $ -> !createTask&{task: $task}
  end createDevice

  sink createHandler
    def task: $HandlerTask;
    $ -> !createTask&{task: $task}
  end createHandler

  sink createIdler
    def task: $IdleTask&{release: release};
    $ -> !createTask&{task: $task}
  end createIdler

  sink createWorker
    def task: $WorkerTask;
    $ -> !createTask&{task: $task}
  end createWorker

  source schedule
    @Scheduler.currentTask: $@Scheduler.taskList;
    $@Scheduler.currentTask -> #
    when <=$NO_TASK> do !VOID
    when <?($::isTaskHoldingOrWaiting <=1>)> do
      @Scheduler.currentTask: $::getLink;
      $@Scheduler.currentTask -> #
    otherwise
      @Scheduler.currentTaskIdentity: $::getIdentity;
      $::getIdentity -> \(<?($TRACING <=1>)> $!\) -> !trace
      @Scheduler.currentTask: [$::runTask] -> \(
        when <=[]> $@Scheduler.currentTask !
        when <?($(1) <{}>)> do [$(1) -> queuePacket] -> #
        when <?($(1)::getPriority <$@Scheduler.currentTask::getPriority~..>)> do $(1)!
        otherwise $@Scheduler.currentTask !
      \);
//      @Scheduler.currentTask: 1 -> \(@: {priority: -1, taskIdentity: 0};
//        $@Scheduler.taskTable... -> #
//        $@.taskIdentity -> \(<=0> $NO_TASK! <> $@Scheduler.taskTable($) ! \)!
//        when <?($::isTaskHoldingOrWaiting <=1>)> do !VOID
//        when <?($::getPriority <$@.priority~..>)> do @: { priority: $::getPriority, taskIdentity: $::getIdentity};
//      \);
      $@Scheduler.currentTask -> #
  end schedule

  source start
    [$IDLER, 0, $NO_WORK, $taskStateRunning] -> !createIdler

    [1..2 -> {identity: $WORKER, kind: $WORK_PACKET_KIND, datum: 0, data: [1..$DATA_SIZE -> 0]}]
    -> [$WORKER, 1000, $, $taskStateWaitingWithPacket] -> !createWorker

    [1..3 -> {identity: $DEVICE_A, kind: $DEVICE_PACKET_KIND, datum: 0, data: [1..$DATA_SIZE -> 0]}]
    -> [$HANDLER_A, 2000, $, $taskStateWaitingWithPacket] -> !createHandler

    [1..3 -> {identity: $DEVICE_B, kind: $DEVICE_PACKET_KIND, datum: 0, data: [1..$DATA_SIZE -> 0]}]
    -> [$HANDLER_B, 3000, $, $taskStateWaitingWithPacket] -> !createHandler

    [$DEVICE_A, 4000, [], $taskStateWaiting] -> !createDevice
    [$DEVICE_B, 5000, [], $taskStateWaiting] -> !createDevice

    $schedule -> !VOID
  end start
end Scheduler

processor DeviceTask
  @:$NO_WORK;
  templates function&{holdSelf:, markWaiting:}
    when <=$NO_WORK> do
      $@DeviceTask -> \(
        <=$NO_WORK> 1 -> !markWaiting
        otherwise
          @DeviceTask: $NO_WORK;
          $ !
      \) !
    otherwise
      @DeviceTask: $;
//      $ -> \(<?($TRACING <=1>)> $::getDatum !\) -> !trace
      1 -> !holdSelf
  end function
end DeviceTask

processor HandlerTask
  @: { workIn: [], deviceIn: []};
  templates function&{holdSelf:, markWaiting:}
    $ -> \(<~=$NO_WORK> $! \)
      -> \(
        when <?($.kind <=$WORK_PACKET_KIND>)> do
          ..|@HandlerTask.workIn: $;
        otherwise
          ..|@HandlerTask.deviceIn: $;
      \) -> !VOID
    $@HandlerTask.workIn::length -> \(
      when <=0> do 1 -> !markWaiting
      otherwise
        $@HandlerTask.workIn(1).datum -> \(
          when <$DATA_SIZE..> do
            ^@HandlerTask.workIn(1) !
          otherwise
            def count: $;
            $@HandlerTask.deviceIn::length -> \(
              when <=0> do 1 -> !markWaiting
              otherwise
                @HandlerTask.deviceIn(1).datum: $@HandlerTask.workIn(1).data($count+1);
                @HandlerTask.workIn(1).datum: $count + 1;
                ^@HandlerTask.deviceIn(1) !
            \) !
        \) !
    \) !
  end function
end HandlerTask

processor IdleTask&{release:}
  @: { control: [x01x] -> $(last-3..last), count: 10000};
  source decrementCount
    @IdleTask.count: $@IdleTask.count - 1;
    $@IdleTask.count !
  end decrementCount
  templates function&{holdSelf:, markWaiting:}
    $decrementCount -> \(
      when <=0> do 1 -> !holdSelf
      otherwise
        ($@IdleTask.control and [x01x]) -> $(last) -> \(
          when <=[x00x]> do
            @IdleTask.control: $@IdleTask.control -> $::shift&{left:-1, fill: $(0)};
            $DEVICE_A -> release !
          otherwise
            @IdleTask.control: $@IdleTask.control
              -> ($::shift&{left:-1, fill: $(0)} xor (53256 -> $::asBytes));
            $DEVICE_B -> release !
        \) !
    \) !
  end function
end IdleTask

processor WorkerTask
  @: {destination: $HANDLER_A, count: 0};
  templates function&{holdSelf:, markWaiting:}
    when <=$NO_WORK> do 1 -> !markWaiting
    otherwise
      @WorkerTask.destination: $@WorkerTask.destination -> \(<=$HANDLER_A> $HANDLER_B! <> $HANDLER_A!\);
      { kind: $.kind,
        identity: $@WorkerTask.destination,
        datum: 0,
        data: $.data -> \[i](
          @WorkerTask.count: $@WorkerTask.count + 1 -> \(<..26> $! <> 1!\);
          65 + $@WorkerTask.count - 1 !
        \)
       } !
  end function
end WorkerTask

processor TaskControlBlock&{link:, task:, stats:}
  def identity: $(1);
  def priority: $(2);
  @: {input: $(3), $(4)...};

  sink addInput
    $@TaskControlBlock.input::length -> \(
      when <=0> do @TaskControlBlock.packetPending: 1;
    \) -> !VOID
    ..|@TaskControlBlock.input: $;
  end addInput

  source getLink
    $link!
  end getLink

  source getPriority
    $priority!
  end getPriority

  source getIdentity
    $identity!
  end getIdentity

  sink setTaskHolding
    $ -> !stats::incrementHoldCount
    @TaskControlBlock.taskHolding: $;
  end setTaskHolding

  sink setTaskWaiting
    @TaskControlBlock.taskWaiting: $;
  end setTaskWaiting

  source isTaskHoldingOrWaiting
    $@TaskControlBlock.taskHolding -> #
    <=1> 1 !
    <?($@TaskControlBlock.packetPending <=0>)?($@TaskControlBlock.taskWaiting <=1>)> 1!
    <> 0!
  end isTaskHoldingOrWaiting

  source isWaitingWithPacket
    $@TaskControlBlock.taskHolding -> #
    <=1> 0 !
    <?($@TaskControlBlock.packetPending <=1>)?($@TaskControlBlock.taskWaiting <=1>)> 1!
    <> 0!
  end isWaitingWithPacket

  source runTask
    $isWaitingWithPacket -> \(
      when <=1> do
        ^@TaskControlBlock.input(1) !
        $@TaskControlBlock.input::length -> \(
          <=0> ..|@TaskControlBlock: $taskStateRunning;
          <>  ..|@TaskControlBlock: $taskStatePacketPending;
        \) -> !VOID
      otherwise $NO_WORK !
    \) -> task::function&{holdSelf: setTaskHolding, markWaiting: setTaskWaiting} !
  end runTask
end TaskControlBlock

source taskStatePacketPending
  { packetPending: 1, taskHolding: 0, taskWaiting: 0 } !
end taskStatePacketPending

source taskStateRunning
  { packetPending: 0, taskHolding: 0, taskWaiting: 0 } !
end taskStateRunning

source taskStateWaiting
  { packetPending: 0, taskHolding: 0, taskWaiting: 1 } !
end taskStateWaiting

source taskStateWaitingWithPacket
  { packetPending: 1, taskHolding: 0, taskWaiting: 1 } !
end taskStateWaitingWithPacket

templates run
  def stats: $Stats;
  $Scheduler&{stats: $stats} -> $::start -> !VOID
  $stats::get -> #
  <{queuePacketCount: <=23246>, holdCount: <=9297>}>
    1 !
  otherwise
    0 !
end run

1 -> harness/run&{name: 'Richards', benchmark:run} -> !VOID
